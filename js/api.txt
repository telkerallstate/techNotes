There are many types of APIs. For example, you may have heard of Java
APIs, or interfaces within classes that let objects talk to each other in the
Java programming language. Along with program-centric APIs, there are
also Web APIs such as the Simple Object Access Protocol (SOAP), Remote
Procedure Call (RPC), and perhaps the most popular—at least in name—
Representational State Transfer (REST).


What an API really does, however, is provide a layer of security. Because
you are making succinct and explicit calls, your phone’s data is never fully
exposed to the server, and likewise the server is never fully exposed to your
phone. Instead, each communicates with small packets of data, sharing
only that which is necessary



Instead, in order to reduce memory requirements and keep
your application as scalable as possible, a RESTful API requires that any
state is stored on the client—not on the server



Along with maintaining your API, you should also plan on how you are
going to version your API. Will you include versioning in the URL such as
http://api.mysite.com/v1/resource, or will you return it in the content-type
(application/json+v1), or are you planning on creating your own custom
versioning header or taking a different approach altogether?



You should NOT version your API just because you’ve:
§? Added new resources
§? Added data in the response
§? Changed technologies (Java to Ruby)
§? Changed your application’s services


your API should be decoupled from both your technology stack
and your service layer


However, you SHOULD consider versioning your API when:
You have a backwards-incompatible platform change, such as
completely rewriting your application and completely changing the
user interface
Your API is no longer extendable—which is exactly what we are
trying to avoid here
Your spec is out of date (e.g. SOAP)



the following specs would be considered
standard or common among the industry: RAML, Swagger, API
Blueprint, IO Docs.



There are even
Software Development Kit (SDK) generation services such as APIMatic.io
and REST United that let you build multi-language SDKs or code libraries
on the fly from your spec!


WSDL1.0 did not originally support HTTP operations other than GET and POST.
With version 2.0, WSDL supports all HTTP verbs and it is now considered to be an acceptable method of documenting REST services

 WADL is lightweight, easier to understand and easier to write than WSDL
 it enriches REST with such goodies as type safety using XML schema types.



Open Authentication—or OAuth—a tokenbased
authorization format was introduced. Unlike basic authorization,
OAuth prevents the API client from accessing the users’ information.
Instead it relays the user to a page on your server where they can enter
their credentials, and then returns the API client an access token for that
user.


OAuth


In REST, resources represent either object types within your application or
primary gateways to areas of your application
For example, the /users
resource would be used to interact with and modify user data



But what makes REST truly unique is that the resources are designed to be
decoupled from their actions, meaning that you can perform multiple
actions on a single resource. This means that you would be able to create,
edit and delete users all within the /users resource


resources are designed to be decoupled from your
architecture and tied not to specific methods or classes, but rather to
generalized application objects. This is a big change from SOAP, where the
calls are tied to the class methods, and RPC, where naming conventions
tend to be tightly coupled to the action you’re taking (getUsers).


content-types
XML (text/xml,
application/xml), JSON (application/JSON), YAML (application/yaml)


how to version your API.
In the URI 
api.domain.com/v1/resource
In the Content-type Header
Content-­-type:
application/json+v1



if a
client does a PUT on an item and the item doesn’t exist, per the RFC the
item/object can then be created on the server—but not all APIs adhere to
this idea. As such, by returning a 201 (Created) instead of a 200 (OK), the
client knows that the item did not previously exist and can choose to delete
it




Once you have designed and built your API, one of the most crucial
aspects is protecting your system’s architecture and your users’ data, and
scaling your API in order to provide downtime and meet your clients
demands.
The easiest and safest way to do this is by implementing an API manager,
such as MuleSoft’s API Gateway